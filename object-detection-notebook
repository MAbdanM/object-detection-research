{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","execution_count":4,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"import cv2 as cv\nimport matplotlib.pyplot as plt\n\nX_fried = []\nX_meat = []\ncountA = 0;\ncountB = 0;\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        if dirname == '/kaggle/input/food11-image-dataset/training/Fried food':\n            if countA >= 25:\n                continue\n            X_fried.append(\n                cv.cvtColor(\n                    cv.imread(os.path.join(dirname, filename))\n                    ,cv.COLOR_BGR2RGB)\n            )\n            countA = countA + 1\n        elif dirname == '/kaggle/input/food11-image-dataset/training/Meat':\n            if countB >= 25:\n                continue\n            X_meat.append(cv.cvtColor(\n                    cv.imread(os.path.join(dirname, filename))\n                    ,cv.COLOR_BGR2RGB)\n            )\n            countB = countB+1\n        if countA >= 25 and countB >= 25:\n            break\n\n\nX_fried_arr = np.asarray(X_fried)\nX_meat_arr = np.asarray(X_meat)\n\n\nprint(len(X_meat_arr))\n\n# print(image)\n# print(image.shape)\n# plt.imshow(image_cvt)","execution_count":10,"outputs":[{"output_type":"stream","text":"25\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"def meanMoment(channel):\n    sumValue = 0\n    countValue = 0\n    for i in range(len(channel)):\n        for j in range(len(channel[i])):\n            #if(channel[i][j] < 99):\n            if(channel[i][j] < 200):\n                sumValue += channel[i][j]\n                countValue += 1\n    if(countValue == 0):\n        return 0\n    else:\n        return sumValue/countValue\n\ndef varianceMoment(channel, meanChannel):\n    sumValue = 0\n    countValue = 0\n    for i in range(len(channel)):\n        for j in range(len(channel[i])):\n            #if(channel[i][j] < 99):\n            if(channel[i][j] < 200):\n                sumValue += np.power(channel[i][j] - meanChannel,2)\n                countValue += 1\n    if(countValue == 0):\n        return 0\n    else:\n        return np.sqrt(sumValue/countValue)\n\ndef skewnessMoment(channel, meanChannel):\n    sumValue = np.int64(0)\n    countValue = 0\n    for i in range(len(channel)):\n        for j in range(len(channel[i])):\n            #if(channel[i][j] < 99):\n            if(channel[i][j] < 200):\n                sumValue += np.power(channel[i][j] - meanChannel,3)\n                countValue += 1\n    if(countValue == 0):\n        return 0\n    else:\n        return np.cbrt(sumValue/countValue)\n    \ndef getColorMoment(channel):\n    meanChannel = meanMoment(channel)\n    varChannel = varianceMoment(channel, meanChannel)\n    skewChannel = skewnessMoment(channel, meanChannel)\n    #return meanChannel, varChannel, skewChannel\n    return meanChannel, varChannel, skewChannel\n    \ndf = pd.DataFrame()\n\n# for _, obj in enumerate(X_fried_arr):\n#     for i in range(obj.shape[0]):\n#         for j in range(obj.shape[1]):\n#             for k in range(obj.shape[2]):\n#                 if(k == 0):\n#                     red_mean = mean_moment()\nmeanR_list = []\nvarR_list = []\nskewR_list = []\nmeanG_list = []\nvarG_list = []\nskewG_list = []\nmeanB_list = []\nvarB_list = []\nskewB_list = []\naRatio_list = []\nroundness_list = []\nlabel = []\nfor i in range(len(X_fried_arr)):\n    meanR, varR, skewR = getColorMoment(X_fried_arr[i][:,:,0]/255)\n    meanG, varG, skewG = getColorMoment(X_fried_arr[i][:,:,1]/255)\n    meanB, varB, skewB = getColorMoment(X_fried_arr[i][:,:,2]/255)\n\n    \n    meanR_list.append(meanR)\n    varR_list.append(varR)\n    skewR_list.append(skewR)\n    meanG_list.append(meanG)\n    varG_list.append(varG)\n    skewG_list.append(skewG)\n    meanB_list.append(meanB)\n    varB_list.append(varB)\n    skewB_list.append(skewB)\n    label.append('Fried Food')\n    \nfor i in range(len(X_meat_arr)):\n    meanR, varR, skewR = getColorMoment(X_meat_arr[i][:,:,0]/255)\n    meanG, varG, skewG = getColorMoment(X_meat_arr[i][:,:,1]/255)\n    meanB, varB, skewB = getColorMoment(X_meat_arr[i][:,:,2]/255)\n    \n    \n    \n    meanR_list.append(meanR)\n    varR_list.append(varR)\n    skewR_list.append(skewR)\n    meanG_list.append(meanG)\n    varG_list.append(varG)\n    skewG_list.append(skewG)\n    meanB_list.append(meanB)\n    varB_list.append(varB)\n    skewB_list.append(skewB)\n    label.append('Meat')\n\ndf['meanR'] = meanR_list\ndf['varR'] = varR_list\ndf['skewR'] = skewR_list\ndf['meanG'] = meanG_list\ndf['varG'] = varG_list\ndf['skewG'] = skewG_list\ndf['meanB'] = meanB_list\ndf['varB'] = varB_list\ndf['skewB'] = skewB_list\ndf['label'] = label\n\n\n\nprint(df)","execution_count":12,"outputs":[{"output_type":"stream","text":"       meanR      varR     skewR     meanG      varG     skewG     meanB  \\\n0   0.667792  0.223640 -0.149199  0.390941  0.212515  0.189518  0.225961   \n1   0.721660  0.176153 -0.189462  0.452013  0.350653 -0.197171  0.469438   \n2   0.591987  0.194781 -0.162562  0.404630  0.255586  0.168512  0.328194   \n3   0.744225  0.202519 -0.199081  0.515401  0.286186  0.214160  0.202251   \n4   0.689002  0.240406 -0.187295  0.442597  0.318260  0.294736  0.264102   \n5   0.600515  0.261474 -0.151827  0.494382  0.325615  0.086665  0.442622   \n6   0.686753  0.218185 -0.152515  0.544810  0.299859 -0.108177  0.488045   \n7   0.775653  0.221339 -0.267634  0.643603  0.236135 -0.234709  0.406782   \n8   0.665970  0.190027 -0.178187  0.523046  0.248569 -0.091831  0.366561   \n9   0.659519  0.234621 -0.182137  0.515352  0.263001  0.156672  0.379138   \n10  0.621707  0.251682 -0.228373  0.366471  0.206014  0.085237  0.149459   \n11  0.641532  0.144939 -0.156717  0.451660  0.205213 -0.093546  0.375170   \n12  0.480203  0.206961 -0.195539  0.379964  0.224779  0.137747  0.311353   \n13  0.703666  0.245638 -0.188280  0.513466  0.308539 -0.176607  0.467631   \n14  0.861682  0.121236 -0.142888  0.533527  0.195446 -0.172988  0.367153   \n15  0.547904  0.244715 -0.231570  0.434442  0.248611  0.121692  0.385910   \n16  0.796341  0.146691 -0.189326  0.673074  0.228105 -0.220373  0.588139   \n17  0.736050  0.143192 -0.133032  0.511189  0.211437  0.110251  0.340621   \n18  0.255809  0.241807  0.239086  0.169390  0.184606  0.191304  0.138148   \n19  0.674561  0.213383 -0.244575  0.445002  0.218301  0.153442  0.272584   \n20  0.530214  0.211001 -0.167053  0.448409  0.275708 -0.137769  0.350516   \n21  0.765359  0.137372 -0.130690  0.597792  0.210833 -0.148587  0.374020   \n22  0.704921  0.216957 -0.156647  0.527109  0.248099  0.160076  0.437633   \n23  0.528727  0.228693  0.128980  0.373398  0.279549  0.269597  0.295592   \n24  0.518431  0.127633 -0.113814  0.436376  0.139028 -0.070715  0.237454   \n25  0.763583  0.206162 -0.196744  0.599396  0.290246 -0.159566  0.320127   \n26  0.566937  0.250342 -0.171567  0.410841  0.258068  0.214674  0.444211   \n27  0.455921  0.279209  0.214071  0.407217  0.283827  0.250965  0.293470   \n28  0.582425  0.240815 -0.212011  0.427203  0.238402  0.185285  0.359558   \n29  0.596816  0.312999 -0.247489  0.468303  0.268322  0.075104  0.430942   \n30  0.615451  0.256254 -0.109669  0.457102  0.270082  0.192668  0.345959   \n31  0.631403  0.292429 -0.191906  0.436202  0.308062  0.107666  0.329081   \n32  0.642785  0.235585 -0.258336  0.326127  0.192666  0.173710  0.112583   \n33  0.497965  0.271094  0.142318  0.447462  0.293061  0.206407  0.416891   \n34  0.517144  0.236472 -0.151826  0.447494  0.287278  0.060019  0.338751   \n35  0.713359  0.291555 -0.265490  0.567910  0.324443  0.101746  0.475775   \n36  0.507119  0.262309 -0.110572  0.410554  0.268625 -0.102736  0.281108   \n37  0.483603  0.326619  0.201825  0.408040  0.318560  0.274548  0.345154   \n38  0.576458  0.173975 -0.147459  0.513545  0.190440 -0.151845  0.286945   \n39  0.607214  0.217563 -0.181193  0.472188  0.202463 -0.068048  0.333352   \n40  0.677585  0.274679 -0.231469  0.588678  0.303417 -0.206334  0.363350   \n41  0.424242  0.298621  0.241290  0.348606  0.308742  0.292735  0.296324   \n42  0.374797  0.263493  0.165279  0.314186  0.289215  0.248043  0.281618   \n43  0.568347  0.256945 -0.092026  0.434630  0.342096  0.239557  0.208031   \n44  0.565186  0.258301 -0.051909  0.394249  0.306628  0.258842  0.275461   \n45  0.536975  0.202076 -0.136247  0.460180  0.226823 -0.095281  0.420808   \n46  0.624178  0.281757 -0.188698  0.405957  0.285618  0.224981  0.212363   \n47  0.584418  0.331396  0.087841  0.443741  0.378573  0.307603  0.344262   \n48  0.702389  0.259537 -0.248464  0.510518  0.276352 -0.206613  0.346546   \n49  0.501396  0.292270  0.126843  0.456207  0.272112  0.162088  0.406351   \n\n        varB     skewB       label  \n0   0.147463  0.189325  Fried Food  \n1   0.314419  0.164031  Fried Food  \n2   0.205647  0.195342  Fried Food  \n3   0.295327  0.323129  Fried Food  \n4   0.377840  0.412644  Fried Food  \n5   0.339496  0.236960  Fried Food  \n6   0.312066  0.153772  Fried Food  \n7   0.225200  0.163668  Fried Food  \n8   0.297456  0.261005  Fried Food  \n9   0.287554  0.240421  Fried Food  \n10  0.158845  0.178068  Fried Food  \n11  0.183363  0.129026  Fried Food  \n12  0.236552  0.210032  Fried Food  \n13  0.353670  0.199862  Fried Food  \n14  0.181757  0.115965  Fried Food  \n15  0.270648  0.208081  Fried Food  \n16  0.291363 -0.197464  Fried Food  \n17  0.248082  0.240433  Fried Food  \n18  0.149667  0.172560  Fried Food  \n19  0.318460  0.341153  Fried Food  \n20  0.203562  0.122377  Fried Food  \n21  0.217457  0.225624  Fried Food  \n22  0.263067  0.245903  Fried Food  \n23  0.305603  0.319752  Fried Food  \n24  0.181983  0.165376  Fried Food  \n25  0.309984  0.266246        Meat  \n26  0.294676  0.244974        Meat  \n27  0.320327  0.339428        Meat  \n28  0.249285  0.225249        Meat  \n29  0.271998  0.122036        Meat  \n30  0.238805  0.191943        Meat  \n31  0.258584  0.191526        Meat  \n32  0.180240  0.262426        Meat  \n33  0.268926  0.218589        Meat  \n34  0.325314  0.228902        Meat  \n35  0.354011  0.275487        Meat  \n36  0.232228  0.233875        Meat  \n37  0.322638  0.309641        Meat  \n38  0.171082  0.080026        Meat  \n39  0.240971  0.193930        Meat  \n40  0.315098  0.247732        Meat  \n41  0.314162  0.304670        Meat  \n42  0.274415  0.244144        Meat  \n43  0.294668  0.310340        Meat  \n44  0.297775  0.301707        Meat  \n45  0.237289  0.105879        Meat  \n46  0.193801  0.200130        Meat  \n47  0.387821  0.362786        Meat  \n48  0.224367 -0.106221        Meat  \n49  0.288792  0.212701        Meat  \n","name":"stdout"}]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":4}
